# -*- coding: utf-8 -*-


import pandas as pd
import numpy as np
import datetime
import portfolioFactory
from ..strategy import strategy as strategy
from ..utils import customExceptions  as customExceptions

class portfolio(object):
    
    ''' Porfolio is a class to represent investment porfolios. 
    
    This class contains returns generated by the portfolio and associated metadata.
    
    A portfolio is composed of a linear combination of strategies 
    
    Public Attributes:
        - portReturns (df): a single-column dataframe representing the porfolio returns
        - strategies (list) : a list with the strategy names composing the portfolio
        - scheme (list) : a list containing the weighting of each strategy

    '''


  
    def __init__(self,strategyPool,weights):
        ''' Method to intialize a porfolio object
            
        Arguments:
            strategyPool (list): a list of unique strategy objects
            universe (universe): a list of numeric strategy weights
        '''
        
        # confirm both inputs are lists
        if type(strategyPool)!=list or type(weights)!=list:
            raise customExceptions.notListError
        
        # confirm lists are the same length
        if len(strategyPool)!=len(weights):
            raise customExceptions.listMismatchError
        
        # confirm elements of strategyPool are strategy objects
        for s in strategyPool:
            if isinstance(s,portfolioFactory.strategy.strategy.strategy)==False:
                raise customExceptions.notStrategyError
    
        # confirm elements of weights are numeric
        for w in weights:
            if isinstance(w,(int, long, float))==False:
                raise customExceptions.badWeightError

        # make sure there are no duplicate strategies
        strats = [x.parameters['name'] for x in strategyPool]
        if len(strats) > len(set(strats)):
            raise customExceptions.duplicatesError
        
        
        # once input has been verified, set attributes
        self._pool = strategyPool
        self.scheme = weights[:]
        self.strategies = strats
        self.portReturns = self.__calcPort()
     





    def __calcPort(self):
        ''' Method to calculate the overall return of a portfolio
        
            Returns a single-column dataframe with the returns of the portfolio
        '''
        
        portWeights = pd.DataFrame(pd.Series(self.scheme, index=self.strategies))
        portElements = {x.parameters['name'] : x.strategyReturns for x in self._pool}
        portData = pd.DataFrame(portElements)
        
        convertFunction = lambda x: float(x[0])
        return portData.dot(portWeights).apply(convertFunction,axis=1)
        

    def __calcWeights(self):
        ''' Method to calculate the overall weight in a particular stock of a portfolio
        
       
        '''

        
        


      